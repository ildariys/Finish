#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс


Процедура ОбработкаПроведения(Отказ, Режим)

//	Движения.БронированиеТоваров.Записывать = Истина;
//	Движения.БронированиеТоваров.Очистить();
//	Движения.БронированиеТоваров.Записать();
//		
//	//1. Получить данные документа
//	МенеджерВТ = Новый МенеджерВременныхТаблиц;
//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ПродажаКниг.Книга КАК Книга,
//		|	СУММА(ПродажаКниг.Количество) КАК Количество
//		|ПОМЕСТИТЬ ВТ_ТоварыДокумента
//		|ИЗ
//		|	Документ.ПродажаКниг.СписокКниг КАК ПродажаКниг
//		|ГДЕ
//		|	ПродажаКниг.Ссылка = &Ссылка
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ПродажаКниг.Книга
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_ТоварыДокумента.Книга КАК Книга,
//		|	ВТ_ТоварыДокумента.Количество КАК Количество
//		|ИЗ
//		|	ВТ_ТоварыДокумента КАК ВТ_ТоварыДокумента";
//	
//	Запрос.УстановитьПараметр("Ссылка", Ссылка);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Выборка = РезультатЗапроса.Выбрать();
//	
//	//2. Записать движения в регистр (списать остатки)

//	// регистр ОстаткиНомеклатуры Расход
//	Движения.ОстаткиНомеклатуры.Записывать = Истина;
//	Для Каждого ТекСтрокаСписокКниг Из СписокКниг Цикл
//		Движение = Движения.ОстаткиНомеклатуры.Добавить();
//		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
//		Движение.Период = Дата;
//		Движение.Склад = Склад;
//		Движение.Книга = ТекСтрокаСписокКниг.Книга;
//		Движение.Количество = ТекСтрокаСписокКниг.Количество;
//	КонецЦикла;  
//	
//	Движения.ОстаткиНомеклатуры.Записать(); 
//	
//	//3. Прочитать остатки и проверить не ушли ли мы в минус
//	Запрос = Новый Запрос;
//    Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ОстаткиНомеклатуры.Книга КАК НомеКниганклатура,
//		|	-ОстаткиНомеклатуры.КоличествоОстаток КАК Дефицит,
//		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОстаткиНомеклатуры.Книга) КАК НоменклатураПредставление
//		|ИЗ
//		|	РегистрНакопления.ОстаткиНомеклатуры.Остатки(
//		|			&Период,
//		|			(Склад, Книга) В
//		|				(ВЫБРАТЬ
//		|					&Склад,
//		|					ВТ_ТоварыДокумента.Книга КАК Книга
//		|				ИЗ
//		|					ВТ_ТоварыДокумента КАК ВТ_ТоварыДокумента)) КАК ОстаткиНомеклатуры
//		|ГДЕ
//		|	ОстаткиНомеклатуры.КоличествоОстаток < 0";

////	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
////		Период = '00010101';
////	Иначе
//		Период = Новый Граница(МоментВремени(), ВидГраницы.Включая);
////	КонецЕсли;
//	
//	Запрос.УстановитьПараметр("Период", Период);
//	Запрос.УстановитьПараметр("Склад", Склад);
//	
//	РезультатЗапроса = Запрос.Выполнить();

//	//4. Сообщить об отрицательных остатках
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		Отказ = Истина;
//		
//		Выборка = РезультатЗапроса.Выбрать();
//		
//		Пока Выборка.Следующий() Цикл
//			Сообщение = Новый СообщениеПользователю;
//			Сообщение.Текст = "Не хватает остатка товара " + Выборка.НоменклатураПредставление + " в количестве " + Выборка.Дефицит + " шт";
//			Сообщение.Сообщить();	
//		КонецЦикла;
//				
//	КонецЕсли;

/////////////////////////////////////////////////////////////Партионный учет

	МетодРасчета = ОбщегоНазначенияСервер.ПолучитьУчетнуюПолитикуОрганизации(Дата);
	
	Если МетодРасчета = Перечисления.СпособСписания.ПоСредней Тогда
		ПроведениеПоПоСредней(МетодРасчета);
	Иначе
		ПроведениеПоFIFOLIFO(МетодРасчета);
	КонецЕсли;
	






///////////////////////////////////////////////////////////////////////////////////
	// регистр Выручка 
	Движения.Выручка.Записывать = Истина;
	Для Каждого ТекСтрокаСписокКниг Из СписокКниг Цикл
		Движение = Движения.Выручка.Добавить();
		Движение.Период = Дата;
		Движение.Магазин = Склад;
		Движение.Оператор = Оператор;
		Движение.Сумма = Сумма;
	КонецЦикла;
	Движения.Выручка.Записать(); 
	
	// регистр ДенежныеСредстваСети Приход
	Движения.ДенежныеСредстваСети.Записывать = Истина;
	Движение = Движения.ДенежныеСредстваСети.Добавить();
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	Движение.Период = Дата;
	Движение.Магазин = Склад;
	Движение.ДенежныеСредства = Сумма;
	Движения.ДенежныеСредстваСети.Записать(); 
	

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытий

// Код процедур и функций

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроведениеПоFIFOLIFO(УчетнаяПолитика)    

	
	    //!!! ОБЕСПЕЧЕНИЕ НЕИЗМЕННОСТИ ДАННЫХ РЕГИСТРОВ ДО КОНЦА ПРОВЕДЕНИЯ ДОКУМЕНТА!!!
	Блокировка = Новый БлокировкаДанных;
	
	ЭлБлокировки = Блокировка.Добавить("РегистрНакопления.ОстаткиНомеклатуры");
	ЭлБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЭлБлокировки.УстановитьЗначение("Склад",Склад);
	
	ЭлБлокировки.ИсточникДанных = СписокКниг;
	ЭлБлокировки.ИспользоватьИзИсточникаДанных("Книга","Книга");	
	
	Блокировка.Заблокировать();
	//
	//!!! УДАЛЕНИЕ СОБСТВЕННЫХ СТАРЫХ ДВИЖЕНИЙ!!!!
	Движения.ОстаткиНомеклатуры.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПродажаТоваровТовары.Книга КАК Книга,
		|	СУММА(ПродажаТоваровТовары.Количество) КАК КолДок,
		|	ПродажаТоваровТовары.Ссылка.Склад КАК Склад
		|ПОМЕСТИТЬ ТабДок
		|ИЗ
		|	Документ.ПродажаКниг.СписокКниг КАК ПродажаТоваровТовары
		|ГДЕ
		|	ПродажаТоваровТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПродажаТоваровТовары.Книга,
		|	ПродажаТоваровТовары.Ссылка.Склад
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Книга,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабДок.Книга КАК Книга,
		|	ТабДок.КолДок КАК КолДок,
		|	ТабДок.Склад КАК Склад,
		|	ЕСТЬNULL(БронированиеТоваровОстатки.КоличествоЗабронированногоОстаток, 0) КАК БроньОст,
		|	ОстаткиНомеклатурыОстатки.Партия КАК Партия,
		|	ОстаткиНомеклатурыОстатки.Партия.Дата КАК ПартияДата,
		|	ЕСТЬNULL(ОстаткиНомеклатурыОстатки.КоличествоОстаток, 0) КАК КолОст,
		|	ЕСТЬNULL(ОстаткиНомеклатурыОстатки.СуммаОстаток, 0) КАК СуммаОст
		|ИЗ
		|	ТабДок КАК ТабДок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БронированиеТоваров.Остатки(
		|				&Момент,
		|				Книга В
		|						(ВЫБРАТЬ
		|							ТабДок.Книга
		|						ИЗ
		|							ТабДок)
		|					И Склад В
		|						(ВЫБРАТЬ
		|							ТабДок.Склад
		|						ИЗ
		|							ТабДок)) КАК БронированиеТоваровОстатки
		|		ПО ТабДок.Книга = БронированиеТоваровОстатки.Книга
		|			И ТабДок.Склад = БронированиеТоваровОстатки.Склад,
		|	РегистрНакопления.ОстаткиНомеклатуры.Остатки(
		|			&Момент,
		|			Книга В
		|					(ВЫБРАТЬ
		|						ТабДок.Книга
		|					ИЗ
		|						ТабДок)
		|				И Склад В
		|					(ВЫБРАТЬ
		|						ТабДок.Склад
		|					ИЗ
		|						ТабДок)) КАК ОстаткиНомеклатурыОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Книга,
		|   ПартияДата УБЫВ,
		|   Партия УБЫВ
		|ИТОГИ
		|	МАКСИМУМ(КолДок),
		|	МАКСИМУМ(БроньОст),
		|	СУММА(КолОст),
		|	СУММА(СуммаОст)
		|ПО
		|	Книга";
	
	
	
	Запрос.УстановитьПараметр("Момент", МоментВремени());
	Запрос.УстановитьПараметр("Ссылка", Ссылка); 
	
	СпособСписания = ОбщегоНазначенияСервер.ПолучитьУчетнуюПолитикуОрганизации(Дата);
	Если СпособСписания = Перечисления.СпособСписания.FIFO Тогда 
		
		      Запрос.Текст = СтрЗаменить(Запрос.Текст, "УБЫВ", "Возр");
			  
	КонецЕсли;		  
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Движения.ОстаткиНомеклатуры.Записывать = Истина;
	
	Пока ВыборкаНоменклатура.Следующий() Цикл   
		
		
			Если   ВыборкаНоменклатура.КолДок > (ВыборкаНоменклатура.КолОст - ВыборкаНоменклатура.БроньОст) Тогда 
				
				Нехватка = ВыборкаНоменклатура.КолДок - ВыборкаНоменклатура.КолОст  - ВыборкаНоменклатура.БроньОст;
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не хватает " +Нехватка+   " шт. товара "+ВыборкаНоменклатура.Книга+
				" в Продажа товаров "+Номер+" от "+Дата;
				Сообщение.Сообщить();
				Отказ = истина;    
				
				Продолжить;
				
			КонецЕсли; 
			
			
		ВыборкаДетальныеЗаписи = ВыборкаНоменклатура.Выбрать(); 
		
		КоличествоНадоСписать  = ВыборкаНоменклатура.КолДок;


		Пока ВыборкаДетальныеЗаписи.Следующий() и КоличествоНадоСписать <> 0   Цикл
			
			Движение = Движения.ОстаткиНомеклатуры.Добавить(); 
			
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			Движение.Период = Дата;
			
			Движение.Книга = ВыборкаДетальныеЗаписи.Книга;
			Движение.Склад = ВыборкаДетальныеЗаписи.Склад;
			
 
				
			
			Если КоличествоНадоСписать >=  ВыборкаДетальныеЗаписи.КолОст Тогда
			
				Движение.Сумма = ВыборкаДетальныеЗаписи.СуммаОст; 
				Движение.Количество = ВыборкаДетальныеЗаписи.КолОст;  
				Движение.Партия = ВыборкаДетальныеЗаписи.Партия;  
				
				КоличествоНадоСписать = КоличествоНадоСписать -  ВыборкаДетальныеЗаписи.КолОст;
				
			ИначеЕсли КоличествоНадоСписать <  ВыборкаДетальныеЗаписи.КолОст Тогда 
				
				Движение.Сумма = КоличествоНадоСписать * ВыборкаДетальныеЗаписи.СуммаОст / ВыборкаДетальныеЗаписи.КолОст;
				Движение.Количество = КоличествоНадоСписать;  
				Движение.Партия = ВыборкаДетальныеЗаписи.Партия;  
		
	         КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	

//	// регистр Задолженности Приход
//	Движения.Задолженности.Записывать = Истина;
//	Движение = Движения.Задолженности.Добавить();
//	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
//	Движение.Период = Дата;

    // 
	Движения.БронированиеТоваров.Записывать = Истина;

	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//Запрос = Новый Запрос;
	//
	//Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	//Запрос.УстановитьПараметр("Склад", Склад);
	//Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//
	//Запрос.Текст =		
	//"ВЫБРАТЬ
	//|	ПродажаТоваровТовары.Книга КАК Книга,
	//|	СУММА(ПродажаТоваровТовары.Количество) КАК Количество,
	//|	ПродажаТоваровТовары.Сумма КАК СуммаВсего
	//|ПОМЕСТИТЬ ВТ_Товары
	//|ИЗ
	//|	Документ.ПродажаКниг.СписокКниг КАК ПродажаТоваровТовары
	//|ГДЕ
	//|	ПродажаТоваровТовары.Ссылка = &Ссылка
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ПродажаТоваровТовары.Книга,
	//|	ПродажаТоваровТовары.Сумма
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ОстаткиНомеклатурыОстатки.Книга КАК Книга,
	//|	ОстаткиНомеклатурыОстатки.КоличествоОстаток КАК КоличествоОстаток,
	//|	ОстаткиНомеклатурыОстатки.СуммаОстаток КАК СуммаОстаток,
	//|	ОстаткиНомеклатурыОстатки.Партия КАК Партия
	//|ПОМЕСТИТЬ ВТ_ОстаткиПоПартиям
	//|ИЗ
	//|	РегистрНакопления.ОстаткиНомеклатуры.Остатки(
	//|			&МоментВремени,
	//|			(Книга, Склад) В
	//|				(ВЫБРАТЬ
	//|					ВТ_Товары.Книга КАК Номенклатура,
	//|					&Склад КАК Склад
	//|				ИЗ
	//|					ВТ_Товары КАК ВТ_Товары)) КАК ОстаткиНомеклатурыОстатки
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	БронированиеТоваровОстатки.Книга КАК Книга,
	//|	БронированиеТоваровОстатки.КоличествоЗабронированногоОстаток КАК КоличествоЗабронированногоОстаток
	//|ПОМЕСТИТЬ ВТ_Бронь
	//|ИЗ
	//|	РегистрНакопления.БронированиеТоваров.Остатки(
	//|			&МоментВРемени,
	//|			(Книга, Склад) В
	//|				(ВЫБРАТЬ
	//|					ВТ_Товары.Книга КАК Номенклатура,
	//|					&Склад КАК Склад
	//|				ИЗ
	//|					ВТ_Товары КАК ВТ_Товары)) КАК БронированиеТоваровОстатки
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_Товары.Книга КАК Книга,
	//|	ВТ_Товары.Количество КАК КоличествоВДокументе,
	//|	ВТ_ОстаткиПоПартиям.Партия КАК Партия,
	//|	ЕСТЬNULL(ВТ_ОстаткиПоПартиям.КоличествоОстаток, 0) КАК КоличествоОстаток,
	//|	ВТ_Товары.СуммаВсего КАК СуммаВсего,
	//|	ЕСТЬNULL(ВТ_ОстаткиПоПартиям.СуммаОстаток, 0) КАК СтоимостьОстаток,
	//|	ЕСТЬNULL(ВТ_Бронь.КоличествоЗабронированногоОстаток, 0) КАК КоличествоБронь
	//|ИЗ
	//|	ВТ_Товары КАК ВТ_Товары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Бронь КАК ВТ_Бронь
	//|		ПО ВТ_Товары.Книга = ВТ_Бронь.Книга
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиПоПартиям КАК ВТ_ОстаткиПоПартиям
	//|		ПО ВТ_Товары.Книга = ВТ_ОстаткиПоПартиям.Книга
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	ВТ_ОстаткиПоПартиям.Партия.МоментВремени
	//|ИТОГИ
	//|	МАКСИМУМ(КоличествоВДокументе),
	//|	СУММА(КоличествоОстаток),
	//|	МАКСИМУМ(СуммаВсего),
	//|	СУММА(СтоимостьОстаток)
	//|ПО
	//|	Книга"
	//;
	//
	//	
	//Если УчетнаяПолитика = Перечисления.МетодыРасчетаСебестомости.FIFO Тогда
	//	
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "УБЫВ", "Возр");
	//	
	//КонецЕсли;
	//
	//
	////установка явной управляемой блокировки
	//Блокировка = Новый БлокировкаДанных;
	//
	//ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ОстаткиНомеклатуры");
	//ЭлементБлокировки.УстановитьЗначение("Склад", Склад);
	//ЭлементБлокировки.ИсточникДанных = СписокКниг;
	//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Книга", "Книга");
	//
	//Блокировка.Заблокировать();
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//Движения.ОстаткиНомеклатуры.Записывать = Истина;
	//Движения.Продажи.Записывать = Истина;
	//
	////Пока ВыборкаНоменклатура.Следующий() Цикл
	//	
	//	// Вставить обработку выборки ВыборкаНоменклатура
	//	ОсталосьСписать 		= ВыборкаНоменклатура.КоличествоВДокументе;
	//	ВыборкаПартии 			= ВыборкаНоменклатура.Выбрать();
	//	
	//	Пока ВыборкаПартии.Следующий() И ОсталосьСписать <> 0 Цикл
	//		
	//		Если ОсталосьСписать < ВыборкаПартии.КоличествоОстаток Тогда
	//			
	//			КоличествоСписания = ОсталосьСписать;
	//			
	//		Иначе
	//			
	//			КоличествоСписания = ВыборкаПартии.КоличествоОстаток;
	//			
	//		КонецЕсли;
	//		
	//		Если КоличествоСписания = ВыборкаПартии.КоличествоОстаток Тогда
	//			
	//			Себестоимость = ВыборкаПартии.СтоимостьОстаток;
	//			
	//		Иначе
	//			
	//			Себестоимость = КоличествоСписания / ВыборкаПартии.КоличествоОстаток * ВыборкаПартии.СтоимостьОстаток;
	//			
	//		КонецЕсли;
	//		
	//		НоваяЗапись 				= Движения.ОстаткиНомеклатуры.ДобавитьРасход();
	//		НоваяЗапись.Период 			= Дата;
	//		НоваяЗапись.Склад 			= Склад;
	//		НоваяЗапись.Книга 			= ВыборкаПартии.Книга;
	//		НоваяЗапись.Партия 			= ВыборкаПартии.Партия;
	//		НоваяЗапись.Количество 		= КоличествоСписания;
	//		НоваяЗапись.Сумма 			= Себестоимость;
	//		
	//		ОсталосьСписать 			= ОсталосьСписать - КоличествоСписания;
	//		
	//	КонецЦикла;
	//	
	//	НоваяЗапись 				= Движения.Продажи.Добавить();
	//	НоваяЗапись.Период 			= Дата;
	//	НоваяЗапись.Книга 			= ВыборкаНоменклатура.Книга;
	//	НоваяЗапись.Количество 		= ВыборкаНоменклатура.КоличествоВДокументе;
	//	НоваяЗапись.Сумма 			= ВыборкаНоменклатура.СуммаВсего;
	//	
	////КонецЦикла;
	
КонецПроцедуры













































Процедура ПроведениеПоПоСредней (МетодРасчета) 
	
	//Шаг 1. Получить остатки по регистру "ОстаткиНоменклатуры"
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПродажаТоваровТовары.Книга,
	|	СУММА(ПродажаТоваровТовары.Количество) КАК Количество,
	|	СУММА(ПродажаТоваровТовары.Сумма) КАК СуммаВсего
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.ПродажаКниг.СписокКниг КАК ПродажаТоваровТовары
	|ГДЕ
	|	ПродажаТоваровТовары.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ПродажаТоваровТовары.Книга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНомеклатурыОстатки.Книга,
	|	ОстаткиНомеклатурыОстатки.КоличествоОстаток,
	|	ОстаткиНомеклатурыОстатки.СуммаОстаток КАК СтоимостьОстаток
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.ОстаткиНомеклатуры.Остатки(&МоментВремени, (Книга, Склад) В
	|		(ВЫБРАТЬ
	|			ВТ_Товары.Книга КАК Книга,
	|			&Склад КАК Склад
	|		ИЗ
	|			ВТ_Товары КАК ВТ_Товары)) КАК ОстаткиНомеклатурыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БронированиеТоваровОстатки.Книга,
	|	БронированиеТоваровОстатки.КоличествоЗабронированногоОстаток
	|ПОМЕСТИТЬ ВТ_Бронь
	|ИЗ
	|	РегистрНакопления.БронированиеТоваров.Остатки(&МоментВремени, (Книга, Склад) В
	|		(ВЫБРАТЬ
	|			ВТ_Товары.Книга КАК Книга,
	|			&Склад КАК Склад
	|		ИЗ
	|			ВТ_Товары КАК ВТ_Товары)) КАК БронированиеТоваровОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Книга КАК Книга,
	|	ВТ_Товары.Количество КАК КоличествоВДокументе,
	|	ЕСТЬNULL(ВТ_Остатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ВТ_Товары.СуммаВсего КАК СуммаВсего,
	|	ЕСТЬNULL(ВТ_Остатки.СтоимостьОстаток, 0) КАК СтоимостьОстаток,
	|	ЕСТЬNULL(ВТ_Бронь.КоличествоЗабронированногоОстаток, 0) КАК БроньОст
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
	|		ПО ВТ_Товары.Книга = ВТ_Остатки.Книга
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Бронь КАК ВТ_Бронь
	|		ПО ВТ_Товары.Книга = ВТ_Бронь.Книга";
	
	//установка явной управляемой блокировки
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ОстаткиНомеклатуры");
	ЭлементБлокировки.УстановитьЗначение("Склад", Склад);
	ЭлементБлокировки.ИсточникДанных = СписокКниг;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Книга", "Книга");
	
	Блокировка.Заблокировать();
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	//2. Сформировать движения в регистре ПартииТоваровНаСкладах
	
	///////////////////////////////////////////
	
;
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/////////////////////////////////////
	Движения.ОстаткиНомеклатуры.Записывать = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяЗапись 				= Движения.ОстаткиНомеклатуры.ДобавитьРасход();
		НоваяЗапись.Период 			= Дата;                      
		НоваяЗапись.Склад 			= Склад;
		НоваяЗапись.Книга 			= Выборка.Книга;
		НоваяЗапись.Количество 		= Выборка.КоличествоВДокументе;
		
		//2.1 Расчет стоимости единицы
		Если Выборка.КоличествоОстаток = 0 Тогда
			
			СебестоимостьЕдиницы = 0;
			
		Иначе
			
			СебестоимостьЕдиницы = Выборка.СтоимостьОстаток / Выборка.КоличествоОстаток;
			
		КонецЕсли;	
		
		//2.2 Расчет стоимости списания			
		НоваяЗапись.Сумма = Выборка.КоличествоВДокументе * СебестоимостьЕдиницы;
		
		//Продажи
		НоваяЗапись 				= Движения.Продажи.Добавить();
		НоваяЗапись.Период 			= Дата;
		НоваяЗапись.Книга 	= Выборка.Книга;
		НоваяЗапись.Количество 		= Выборка.КоличествоВДокументе;
		НоваяЗапись.Сумма 			= Выборка.СуммаВсего;
		НоваяЗапись.Себестоимость 	= Выборка.КоличествоВДокументе * СебестоимостьЕдиницы;
				
	КонецЦикла;
	
	
КонецПроцедуры



#КонецОбласти

#Область Инициализация

#КонецОбласти

#КонецЕсли
