// @strict-types


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс


Процедура ВыполнитьБронирование(ДокументСсылка) Экспорт
	
	Если Не ДоступностьБрони(ДокументСсылка) Тогда
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПеремещениеКниг.Дата,
		|	ПеремещениеКниг.СкладОтправки
		|ИЗ
		|	Документ.ПеремещениеКниг КАК ПеремещениеКниг
		|ГДЕ
		|	ПеремещениеКниг.Ссылка = &Ссылка
		|	И ПеремещениеКниг.Проведен = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			Дата = ВыборкаДетальныеЗаписи.Дата;
			Склад = ВыборкаДетальныеЗаписи.СкладОтправки;
		КонецЦикла;

		НаборЗаписей = РегистрыНакопления.БронированиеТоваров.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);

		Для каждого ТекСтрокаТовары Из ДокументСсылка.СписокПеремещаемыхКниг Цикл
			Движение = НаборЗаписей.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Книга = ТекСтрокаТовары.Книга;
			Движение.Склад = Склад;
			Движение.КоличествоЗабронированного = ТекСтрокаТовары.Количество;
		КонецЦикла;
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	Сообщить("Бронирование выполнено успешно!");
	
КонецПроцедуры

Функция ДоступностьБрони(Ссылка)
	
	//  2. Получение запросом данных документа и остатков регистра
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("МоментВремени", Ссылка.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КнигиПеремещения.Книга КАК Книга,
	|	СУММА(КнигиПеремещения.Количество) КАК Количество,
	|	КнигиПеремещения.Ссылка.СкладОтправки КАК СкладОтправки,
	|	КнигаСправочник.Представление КАК Представление
	|ПОМЕСТИТЬ Книги
	|ИЗ
	|	Документ.ПеремещениеКниг.СписокПеремещаемыхКниг КАК КнигиПеремещения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Книги КАК КнигаСправочник
	|		ПО КнигиПеремещения.Книга = КнигаСправочник.Ссылка
	|ГДЕ
	|	КнигиПеремещения.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	КнигиПеремещения.Книга,
	|	КнигиПеремещения.Ссылка.СкладОтправки,
	|	КнигаСправочник.Представление
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Книга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Книги.Книга КАК Книга,
	|	Книги.Количество КАК Количество,
	|	ЕСТЬNULL(БронированиеТоваровОстатки.КоличествоЗабронированногоОстаток, 0) КАК Бронь,
	|	БронированиеТоваровОстатки.Склад КАК Склад,
	|	ЕСТЬNULL(ОстаткиНомеклатурыОстатки.КоличествоОстаток, 0) КАК Остаток,
	|	Книги.Представление КАК КнигаПредставление
	|ИЗ
	|	Книги КАК Книги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БронированиеТоваров.Остатки(
	|				&МоментВремени,
	|				Книга В
	|						(ВЫБРАТЬ
	|							Книги.Книга
	|						ИЗ
	|							Книги)
	|					И Склад В
	|						(ВЫБРАТЬ
	|							Книги.СкладОтправки КАК СкладОтправки
	|						ИЗ
	|							Книги КАК Книги)) КАК БронированиеТоваровОстатки
	|		ПО Книги.Книга = БронированиеТоваровОстатки.Книга
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНомеклатуры.Остатки(
	|				&МоментВремени,
	|				Книга В
	|						(ВЫБРАТЬ
	|							Книги.Книга
	|						ИЗ
	|							Книги)
	|					И Склад В
	|						(ВЫБРАТЬ
	|							Книги.СкладОтправки КАК СкладОтправки
	|						ИЗ
	|							Книги КАК Книги)) КАК ОстаткиНомеклатурыОстатки
	|		ПО Книги.Книга = ОстаткиНомеклатурыОстатки.Книга";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//  3. Обход результатов запроса
	ВыборкаТовары = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаТовары.Следующий() Цикл
		
		//  4. Проверка на достаточность товаров
		Дефицит = ВыборкаТовары.Количество - ВыборкаТовары.Остаток + ВыборкаТовары.Бронь;
		Если Дефицит > 0 Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Товара " + ВыборкаТовары.КнигаПредставление + " недостаточно в количестве " + Дефицит + " шт.";
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции


#КонецОбласти

#Область ОбработчикиСобытий

// Код процедур и функций

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Код процедур и функций

#КонецОбласти

#КонецЕсли
