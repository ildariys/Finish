#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты
		.ДобавитьТест("ПроверкаПроведения")
		.УдалениеТестовыхДанных()
	;
	
КонецПроцедуры

Процедура ОбработкаПроведения() Экспорт
	
	ВызватьИсключение "Тест не реализован";
	
КонецПроцедуры

Функция ГенерацияДанных() Экспорт
	
	#Если Сервер Тогда
		Конструктор = ЮТест.Данные().КонструкторОбъекта(Документы.ПоступлениеКниг);
	#Иначе
		Конструктор = ЮТест.Данные().КонструкторОбъекта("Документы.ПоступлениеКниг");
	#КонецЕсли

	Конструктор = ЮТест.Данные().КонструкторОбъекта(Документы.ПоступлениеКниг)
		.Установить("Приемщик", ПараметрыСеанса.ТекущийПользователь)
		.Установить("Склад", ПараметрыСеанса.ТекущийМагазин)
		.Установить("ТекущийКурс", 68 )
		.ФикцияОбязательныхПолей()		
		.ФикцияРеквизитов("Сумма")
		.ТабличнаяЧасть("СписокКниг");
		//Для Инд1 = 1 По ЮТест.Данные().СлучайноеЧисло(2, 8) Цикл
      		Конструктор.ДобавитьСтроку()
	        .Фикция("НазваниеКниги")
	        .Установить("Цена", ЮТест.Данные().СлучайноеПоложительноеЧисло(9999, 2))
	        .Установить("Количество", ЮТест.Данные().СлучайноеПоложительноеЧисло(20))
	        .Установить("Сумма", Конструктор.ДанныеСтроки().Цена * Конструктор.ДанныеСтроки().Количество);
    	//КонецЦикла;
	Возврат Конструктор.Провести();
КонецФункции

Функция ПроверкаПроведения() Экспорт
	
	Документ = ГенерацияДанных();
	Движения = ЮТЗапросы.ДвиженияДокумента(Документ, "ОстаткиНоменклатуры");

	ЮТест.ОжидаетЧто(Движения)
  	.Заполнено()
  	.КаждыйЭлементСоответствуетПредикату(
    ЮТест.Предикат()
      .Реквизит("ВидДвижения").Равно(ВидДвиженияНакопления.Приход)
      .Реквизит("Количество").Больше(0)
  )
;

КонецФункции

#КонецОбласти

